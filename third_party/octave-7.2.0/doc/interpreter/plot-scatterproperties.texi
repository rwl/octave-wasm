@c DO NOT EDIT!  Generated automatically by genpropdoc.m.

@c Copyright (C) 2014-2022 The Octave Project Developers
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

Properties of @code{scatter} objects (@pxref{XREFscatter,,scatter}):

@table @asis

@anchor{XREFscatterannotation}
@prindex scatter annotation
@item @code{annotation}: def. @code{[](0x0)}



@anchor{XREFscatterbeingdeleted}
@prindex scatter beingdeleted
@item @code{beingdeleted}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFscatterbusyaction}
@prindex scatter busyaction
@item @code{busyaction}: @qcode{"cancel"} | @{@qcode{"queue"}@}
Define how Octave handles the execution of this object's callback properties when it is unable to interrupt another object's executing callback.  This is only relevant when the currently executing callback object has its @code{interruptible} property set to @qcode{"off"}.  The @code{busyaction} property of the interrupting callback object indicates whether the interrupting callback is queued (@qcode{"queue"} (default)) or discarded (@qcode{"cancel"}).
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFscatterbuttondownfcn}
@prindex scatter buttondownfcn
@item @code{buttondownfcn}: string | function handle, def. @code{[](0x0)}
For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFscattercdata}
@prindex scatter cdata
@item @code{cdata}: scalar | matrix, def. @code{[0   0.4470   0.7410]}
Data defining the scatter object color.

If @code{cdata} is a scalar index into the current colormap or a RGB triplet, it defines the color of all scatter markers.

If @code{cdata} is an N-by-1 vector of indices or an N-by-3 (RGB) matrix, it defines the color of each one of the N scatter markers.


@anchor{XREFscattercdatamode}
@prindex scatter cdatamode
@item @code{cdatamode}: @{@qcode{"auto"}@} | @qcode{"manual"}
If @code{cdatamode} is @qcode{"auto"}, @code{cdata} is set to the color from the @code{colororder} of the ancestor axes corresponding to the @code{seriesindex}.


@anchor{XREFscattercdatasource}
@prindex scatter cdatasource
@item @code{cdatasource}: def. @qcode{""}
Data from workspace variables is not yet implemented for scatter objects.  @code{cdatasource} is unused.


@anchor{XREFscatterchildren}
@prindex scatter children
@item @code{children} (read-only): vector of graphics handles, def. @code{[](0x1)}
@code{children} is unused.


@anchor{XREFscatterclipping}
@prindex scatter clipping
@item @code{clipping}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{clipping} is @qcode{"on"}, the scatter is clipped in its parent axes limits.


@anchor{XREFscattercontextmenu}
@prindex scatter contextmenu
@item @code{contextmenu}: graphics handle, def. @code{[](0x0)}
Graphics handle of the uicontextmenu object that is currently associated to this scatter object.


@anchor{XREFscattercreatefcn}
@prindex scatter createfcn
@item @code{createfcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately after scatter has been created.  Function is set by using default property on root object, e.g., @code{set (groot, "defaultscattercreatefcn", 'disp ("scatter created!")')}.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFscatterdatatiptemplate}
@prindex scatter datatiptemplate
@item @code{datatiptemplate}: def. @code{[](0x0)}



@anchor{XREFscatterdeletefcn}
@prindex scatter deletefcn
@item @code{deletefcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately before scatter is deleted.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFscatterdisplayname}
@prindex scatter displayname
@item @code{displayname}: def. @qcode{""}
Text of the legend entry corresponding to this scatter object.


@anchor{XREFscatterhandlevisibility}
@prindex scatter handlevisibility
@item @code{handlevisibility}: @qcode{"callback"} | @qcode{"off"} | @{@qcode{"on"}@}
If @code{handlevisibility} is @qcode{"off"}, the scatter's handle is not visible in its parent's "children" property.


@anchor{XREFscatterhittest}
@prindex scatter hittest
@item @code{hittest}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether scatter processes mouse events or passes them to ancestors of the object.  When enabled, the object may respond to mouse clicks by evaluating the @qcode{"buttondownfcn"}, showing the uicontextmenu, and eventually becoming the root @qcode{"currentobject"}.  This property is only relevant when the object can accept mouse clicks which is determined by the @qcode{"pickableparts"} property.  @xref{XREFscatterpickableparts, , @w{pickableparts property}}.


@anchor{XREFscatterinterruptible}
@prindex scatter interruptible
@item @code{interruptible}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether this object's callback functions may be interrupted by other callbacks.  By default @code{interruptible} is @qcode{"on"} and callbacks that make use of @code{drawnow}, @code{figure}, @code{waitfor}, @code{getframe} or @code{pause} functions are eventually interrupted.
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFscatterlatitudedata}
@prindex scatter latitudedata
@item @code{latitudedata}: def. @code{[](0x0)}



@anchor{XREFscatterlatitudedatasource}
@prindex scatter latitudedatasource
@item @code{latitudedatasource}: def. @qcode{""}



@anchor{XREFscatterlinewidth}
@prindex scatter linewidth
@item @code{linewidth}: def. @code{0.5000}
Line width of the edge of the markers.


@anchor{XREFscatterlongitudedata}
@prindex scatter longitudedata
@item @code{longitudedata}: def. @code{[](0x0)}



@anchor{XREFscatterlongitudedatasource}
@prindex scatter longitudedatasource
@item @code{longitudedatasource}: def. @qcode{""}



@anchor{XREFscattermarker}
@prindex scatter marker
@item @code{marker}: @qcode{"*"} | @qcode{"+"} | @qcode{"."} | @qcode{"<"} | @qcode{">"} | @qcode{"^"} | @qcode{"_"} | @qcode{"d"} | @qcode{"diamond"} | @qcode{"h"} | @qcode{"hexagram"} | @qcode{"none"} | @{@qcode{"o"}@} | @qcode{"p"} | @qcode{"pentagram"} | @qcode{"s"} | @qcode{"square"} | @qcode{"v"} | @qcode{"x"} | @qcode{"|"}
@xref{XREFlinemarker, , @w{line marker property}}.


@anchor{XREFscattermarkeredgealpha}
@prindex scatter markeredgealpha
@item @code{markeredgealpha}: scalar, def. @code{1}
Transparency level of the faces of the markers where a value of 0 means complete transparency and a value of 1 means solid faces without transparency.  Note that the markers are not sorted from back to front which might lead to unexpected results when rendering layered transparent markers or in combination with other transparent objects.


@anchor{XREFscattermarkeredgecolor}
@prindex scatter markeredgecolor
@item @code{markeredgecolor}: @{@qcode{"none"}@} | @{@qcode{"flat"}@} | colorspec
Color of the edge of the markers.  @qcode{"none"} means that the edges are transparent and @qcode{"flat"} means that the value from @code{cdata} is used.  @xref{XREFlinemarkeredgecolor, , @w{line markeredgecolor property}}.


@anchor{XREFscattermarkerfacealpha}
@prindex scatter markerfacealpha
@item @code{markerfacealpha}: scalar, def. @code{1}
Transparency level of the faces of the markers where a value of 0 means complete transparency and a value of 1 means solid faces without transparency.  Note that the markers are not sorted from back to front which might lead to unexpected results when rendering layered transparent markers or in combination with other transparent objects.


@anchor{XREFscattermarkerfacecolor}
@prindex scatter markerfacecolor
@item @code{markerfacecolor}: @{@{@qcode{"none"}@}@} | @qcode{"flat"} | @qcode{"auto"} | colorspec
Color of the face of the markers.  @qcode{"none"} means that the faces are transparent, @qcode{"flat"} means that the value from @code{cdata} is used, and @qcode{"auto"} uses the @code{color} property of the ancestor axes. @xref{XREFlinemarkerfacecolor, , @w{line markerfacecolor property}}.


@anchor{XREFscatterparent}
@prindex scatter parent
@item @code{parent}: graphics handle
Handle of the parent graphics object.


@anchor{XREFscatterpickableparts}
@prindex scatter pickableparts
@item @code{pickableparts}: @qcode{"all"} | @qcode{"none"} | @{@qcode{"visible"}@}
Specify whether scatter will accept mouse clicks.  By default, @code{pickableparts} is @qcode{"visible"} and only visible parts of the scatter or its children may react to mouse clicks.  When @code{pickableparts} is @qcode{"all"} both visible and invisible parts (or children) may react to mouse clicks.  When @code{pickableparts} is @qcode{"none"} mouse clicks on the object are ignored and transmitted to any objects underneath this one.  When an object is configured to accept mouse clicks the @qcode{"hittest"} property will determine how they are processed.  @xref{XREFscatterhittest, , @w{hittest property}}.


@anchor{XREFscatterrdata}
@prindex scatter rdata
@item @code{rdata}: def. @code{[](0x0)}



@anchor{XREFscatterrdatasource}
@prindex scatter rdatasource
@item @code{rdatasource}: def. @qcode{""}



@anchor{XREFscatterselected}
@prindex scatter selected
@item @code{selected}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFscatterselectionhighlight}
@prindex scatter selectionhighlight
@item @code{selectionhighlight}: @qcode{"off"} | @{@qcode{"on"}@}



@anchor{XREFscatterseriesindex}
@prindex scatter seriesindex
@item @code{seriesindex}: def. @code{1}
Each scatter object in the same axes is asigned an incrementing integer.  This corresponds to the index into the @code{colororder} of the ancestor axes that is used if @code{cdatamode} is set to @qcode{"auto"}.


@anchor{XREFscattersizedata}
@prindex scatter sizedata
@item @code{sizedata}: [] | scalar | vector, def. @code{[](0x0)}
Size of the area of the marker. A scalar value applies to all markers.  If @code{cdata} is an N-by-1 vector, it defines the color of each one of the N scatter markers.


@anchor{XREFscattersizedatasource}
@prindex scatter sizedatasource
@item @code{sizedatasource}: def. @qcode{""}
Data from workspace variables is not yet implemented for scatter objects.  @code{sizedatasource} is unused.


@anchor{XREFscattertag}
@prindex scatter tag
@item @code{tag}: string, def. @qcode{""}
A user-defined string to label the graphics object.


@anchor{XREFscatterthetadata}
@prindex scatter thetadata
@item @code{thetadata}: def. @code{[](0x0)}



@anchor{XREFscatterthetadatasource}
@prindex scatter thetadatasource
@item @code{thetadatasource}: def. @qcode{""}



@anchor{XREFscattertype}
@prindex scatter type
@item @code{type} (read-only): string
Class name of the graphics object.  @code{type} is always @qcode{"scatter"}


@anchor{XREFscatteruserdata}
@prindex scatter userdata
@item @code{userdata}: Any Octave data, def. @code{[](0x0)}
User-defined data to associate with the graphics object.


@anchor{XREFscattervisible}
@prindex scatter visible
@item @code{visible}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{visible} is @qcode{"off"}, the scatter is not rendered on screen.


@anchor{XREFscatterxdata}
@prindex scatter xdata
@item @code{xdata}: vector, def. @code{[](0x0)}
Vector with the x coordinates of the scatter object.


@anchor{XREFscatterxdatasource}
@prindex scatter xdatasource
@item @code{xdatasource}: def. @qcode{""}
Data from workspace variables is not yet implemented for scatter objects.  @code{xdatasource} is unused.


@anchor{XREFscatterydata}
@prindex scatter ydata
@item @code{ydata}: vector, def. @code{[](0x0)}
Vector with the y coordinates of the scatter object.


@anchor{XREFscatterydatasource}
@prindex scatter ydatasource
@item @code{ydatasource}: def. @qcode{""}
Data from workspace variables is not yet implemented for scatter objects.  @code{ydatasource} is unused.


@anchor{XREFscatterzdata}
@prindex scatter zdata
@item @code{zdata}: [] | vector, def. @code{[](0x0)}
For 3D data, vector with the y coordinates of the scatter object.


@anchor{XREFscatterzdatasource}
@prindex scatter zdatasource
@item @code{zdatasource}: def. @qcode{""}
Data from workspace variables is not yet implemented for scatter objects.  @code{zdatasource} is unused.

@end table